"2020-11-16", "2020-11-18", "2020-11-23", "2020-11-25",
"2020-11-30", "2020-12-02", "2020-12-07", "2020-12-09",
"2020-12-14", "2020-12-16", "2020-12-21", "2020-12-23",
"2020-12-28", "2021-01-04", "2021-01-11", "2021-01-13",
"2021-01-19", "2021-01-20", "2021-01-25", "2021-01-27",
"2021-02-01", "2021-02-03", "2021-02-08", "2021-02-10",
"2021-02-15", "2021-02-17", "2021-02-22", "2021-02-24",
"2021-03-01", "2021-03-03", "2021-03-08", "2021-03-10",
"2021-03-15", "2021-03-17", "2021-03-22", "2021-03-24",
"2021-03-29", "2021-03-31", "2021-04-05", "2021-04-07",
"2021-04-12", "2021-04-14", "2021-04-19", "2021-04-21",
"2021-04-26", "2021-04-28", "2021-05-03", "2021-05-05",
"2021-05-10", "2021-05-12", "2021-05-17", "2021-05-19",
"2021-05-24", "2021-05-26", "2021-06-01", "2021-06-02",
"2021-06-07", "2021-06-09", "2021-06-14", "2021-06-16",
"2021-06-21", "2021-06-23", "2021-06-28", "2021-06-30"), stringsAsFactors = FALSE)
sample_data$date = as.Date(sample_data$date)
sample_data$collection_num = as.numeric(sample_data$collection_num)
#Clean up the recovery data
recovery_data$ct = as.numeric(recovery_data$ct)
recovery_data = plyr::ddply(recovery_data,.(sample_id, cg_num),plyr::summarize, avg_ct = mean(ct))
recovery_data = recovery_data %>% drop_na()
recovery_data = recovery_data %>% separate(sample_id, into = c("wrf", "collection_num", "rep"), sep = "_") %>% drop_na()
recovery_data$collection_num = as.numeric(recovery_data$collection_num)
recovery_data = recovery_data %>% mutate(copies_ul_rxn = 10^((avg_ct-30.7)/-3.238))
recovery_data = recovery_data %>% mutate(copies_ul_sample = copies_ul_rxn *20/2*25/3*60/280)
recovery_data %>%
ggplot(aes(x = avg_ct)) +
geom_histogram() +
geom_vline(xintercept = mean(recovery_data$avg_ct), col = "red") +
annotate("text", x = round(mean(recovery_data$avg_ct),2), y = 40,
label = paste("Mean =", round(mean(recovery_data$avg_ct), 2)), col = "red") +
geom_vline(xintercept = median(recovery_data$avg_ct), col = "blue") +
annotate("text", x = median(recovery_data$avg_ct), y = 38,
label = paste("Median = ", round(median(recovery_data$avg_ct),2)), col = "blue") +
xlab("Cq Value") +
ylab("Count") +
ggtitle("Cq Values of Process Controls (N = 177)")
recovery_data %>%
ggplot(aes(x = avg_ct)) +
geom_histogram() +
geom_vline(xintercept = mean(recovery_data$avg_ct), col = "red") +
annotate("text", x = round(mean(recovery_data$avg_ct),2), y = 40,
label = paste("Mean =", round(mean(recovery_data$avg_ct), 2)), col = "red") +
geom_vline(xintercept = median(recovery_data$avg_ct), col = "blue") +
annotate("text", x = median(recovery_data$avg_ct), y = 38,
label = paste("Median = ", round(median(recovery_data$avg_ct),2)), col = "blue") +
xlim(0,40) +
xlab("Cq Value") +
ylab("Count") +
ggtitle("Cq Values of Process Controls (N = 177)")
shapiro.test(recovery_data$avg_ct)
recovery_data %>%
ggplot(aes(x = avg_ct)) +
geom_histogram() +
facet_wrap(~wrf, ncol = 1) +
xlab("Cq Value") +
ylab("Count") +
ggtitle("Cq Values of Process Controls (N = 177)")
recovery_data %>%
ggplot(aes(x = wrf, y = avg_ct)) +
geom_boxplot() +
ylab("Cq Value") +
ggtitle("Cq Values of Process Controls") +
stat_compare_means()
recovery_data %>%
ggplot(aes(x = collection_num, y = avg_ct)) +
geom_point() +
facet_wrap(~wrf, ncol = 1) +
xlab("Collection Number") +
ylab("Cq Value") +
ggtitle("Cq Values of Process Controls")
recovery_data %>%
ggplot(aes(x = copies_ul_sample)) +
geom_histogram() +
geom_vline(xintercept = mean(recovery_data$copies_ul_sample), col = "red") +
annotate("text", x = round(mean(recovery_data$copies_ul_sample),2), y = 40,
label = paste("Mean =", round(mean(recovery_data$copies_ul_sample), 2)), col = "red") +
geom_vline(xintercept = median(recovery_data$copies_ul_sample), col = "blue") +
annotate("text", x = median(recovery_data$copies_ul_sample), y = 38,
label = paste("Median = ", round(median(recovery_data$copies_ul_sample),2)), col = "blue") +
xlab("Copies per uL") +
ylab("Count") +
ggtitle("Concentration of BCoV Recovered from Process Controls (N = 177)")
shapiro.test(recovery_data$copies_ul_sample)
recovery_data %>%
ggplot(aes(x = copies_ul_sample)) +
geom_histogram() +
facet_wrap(~wrf, ncol = 1) +
xlab("Copies per uL") +
ylab("Count") +
ggtitle("Concentration of BCoV Recovered from Process Controls (N = 177)")
recovery_data %>%
ggplot(aes(x = wrf, y = copies_ul_sample)) +
geom_boxplot() +
ylab("Copies per uL") +
ggtitle("Concentration of BCoV Recovered from Process Controls (N = 177)") +
stat_compare_means()
recovery_data %>%
ggplot(aes(x = collection_num, y = avg_ct)) +
geom_point() +
facet_wrap(~wrf, ncol = 1) +
xlab("Collection Number") +
ylab("Copies per uL") +
ggtitle("Concentration of BCoV Recovered from Process Controls (N = 177)")
#Clean up the CalfGuard Data
calf_guard = plyr::ddply(calf_guard,.(sample_id),plyr::summarize, avg_ct = mean(ct))
calf_guard = calf_guard %>% separate(sample_id, into = c("CG", "cg_num"), sep = "_") %>% drop_na()
calf_guard$cg_num = as.numeric(calf_guard$cg_num)
calf_guard = calf_guard %>% drop_na()
calf_guard = calf_guard %>% mutate(copies_ul_rxn = 10^((avg_ct-30.7)/-3.238))
calf_guard = calf_guard %>% mutate(copies_ul_cg = copies_ul_rxn *20/2*25/3*60/50)
calf_guard = calf_guard %>% mutate(copies_ul_input = copies_ul_rxn *20/2*25/3*60/50*40/40000)
calf_guard %>%
ggplot(aes(x = avg_ct)) +
geom_histogram() +
geom_vline(xintercept = mean(calf_guard$avg_ct), col = "red") +
annotate("text", x = round(mean(calf_guard$avg_ct),2), y = 40,
label = paste("Mean =", round(mean(calf_guard$avg_ct), 2)), col = "red") +
geom_vline(xintercept = median(calf_guard$avg_ct), col = "blue") +
annotate("text", x = median(calf_guard$avg_ct), y = 38,
label = paste("Median = ", round(median(calf_guard$avg_ct),2)), col = "blue") +
xlab("Cq Value") +
ylab("Count") +
ggtitle("Cq Value of CalfGuard (N = 55)")
calf_guard %>%
ggplot(aes(x = avg_ct)) +
geom_histogram() +
geom_vline(xintercept = mean(calf_guard$avg_ct), col = "red") +
annotate("text", x = round(mean(calf_guard$avg_ct),2), y = 40,
label = paste("Mean =", round(mean(calf_guard$avg_ct), 2)), col = "red") +
geom_vline(xintercept = median(calf_guard$avg_ct), col = "blue") +
annotate("text", x = median(calf_guard$avg_ct), y = 38,
label = paste("Median = ", round(median(calf_guard$avg_ct),2)), col = "blue") +
xlim(0,40) +
xlab("Cq Value") +
ylab("Count") +
ggtitle("Cq Value of CalfGuard (N = 55)")
shapiro.test(calf_guard$avg_ct)
calf_guard %>%
ggplot(aes(x = copies_ul_cg)) +
geom_histogram() +
geom_vline(xintercept = mean(calf_guard$copies_ul_cg), col = "red") +
annotate("text", x = round(mean(calf_guard$copies_ul_cg),2), y = 40,
label = paste("Mean =", round(mean(calf_guard$copies_ul_cg), 2)), col = "red") +
geom_vline(xintercept = median(calf_guard$copies_ul_cg), col = "blue") +
annotate("text", x = median(calf_guard$copies_ul_cg), y = 38,
label = paste("Median = ", round(median(calf_guard$copies_ul_cg),2)), col = "blue") +
xlab("Copies per uL") +
ylab("Count") +
ggtitle("Concentration of BcoV in CalfGuard (N = 55)")
calf_guard %>%
filter(cg_num != 54) %>%
ggplot(aes(x = copies_ul_cg)) +
geom_histogram() +
geom_vline(xintercept = median(calf_guard$copies_ul_cg), col = "blue") +
annotate("text", x = median(calf_guard$copies_ul_cg), y = 38,
label = paste("Median = ", round(median(calf_guard$copies_ul_cg),2)), col = "blue") +
xlab("Copies per uL") +
ylab("Count") +
ggtitle("Concentration of BcoV in CalfGuard (N = 55)")
calf_guard %>%
filter(cg_num != 54) %>%
ggplot(aes(x = log10(copies_ul_cg))) +
geom_histogram() +
#geom_vline(xintercept = median(calf_guard$copies_ul_cg), col = "blue") +
#annotate("text", x = median(calf_guard$copies_ul_cg), y = 38,
#label = paste("Median = ", round(median(calf_guard$copies_ul_cg),2)), col = "blue") +
xlab("Copies per uL") +
ylab("Count") +
ggtitle("Concentration of BcoV in CalfGuard (N = 55)")
output = recovery_data %>% select(wrf, collection_num, cg_num, copies_ul_sample, avg_ct)
input = calf_guard %>% select(cg_num, copies_ul_input, avg_ct)
recovery_calc = left_join(output, input, by = "cg_num")
recovery_calc = recovery_calc %>% mutate(percent_recovery = 100*(copies_ul_sample/copies_ul_input))
recovery_calc = recovery_calc %>% drop_na()
summary(recovery_calc)
recovery_calc %>%
ggplot(aes(x=percent_recovery)) +
geom_histogram() +
geom_vline(xintercept = mean(recovery_calc$percent_recovery), col = "red") +
annotate("text", x = round(mean(recovery_calc$percent_recovery),2), y = 40,
label = paste("Mean =", round(mean(recovery_calc$percent_recovery), 2)), col = "red") +
geom_vline(xintercept = median(recovery_calc$percent_recovery), col = "blue") +
annotate("text", x = median(recovery_calc$percent_recovery), y = 38,
label = paste("Median = ", round(median(recovery_calc$percent_recovery),2)), col = "blue") +
xlab("Recovery of BCoV (%)") +
ylab("Count") +
ggtitle("Recovery of BCoV from Process Controls (%) N = 168")
my_comparisons <- list( c("NO", "MI"), c("NO", "CC"), c("MI", "CC") )
recovery_calc %>%
ggplot(aes(x = wrf, y = percent_recovery)) +
geom_boxplot() +
ylab("Percent Recovery") +
ggtitle("Recovery of BCoV from Process Controls (%) N = 168") +
stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 400)
recovery_calc %>% ggplot(aes(x = collection_num, y = percent_recovery)) +
geom_point() +
facet_wrap(~wrf, ncol = 1)
#error with line 50 & 51 - MI recovery data is duplicated here. We need to go back to the original datasheet.
recovery_calc[51,] = NA
recovery_filtered = recovery_calc %>%
select(wrf, collection_num, percent_recovery) %>%
spread(key = wrf, value = percent_recovery) %>%
select(collection_num, CC, MI, NO) %>%
drop_na()
recovery_filtered = melt(recovery_filtered, id = "collection_num", variable.name = "wrf")
recovery_filtered %>% ggplot(aes(x = value)) + geom_histogram()
recovery_filtered %>%
ggplot(aes(x = wrf, y = value)) +
geom_boxplot() +
ylab("Percent Recovery") +
ggtitle("Recovery of BCoV from Process Controls (%) N = 135") +
stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 400)
#reformat date
plant_data$date = as.character(plant_data$date)
plant_data$date = as.Date(plant_data$date, "%m/%d/%Y")
#change MGD to L per day
plant_data = mutate(plant_data, influent_flow_L = influent_flow_mg *1000000*3.78541)
ddply(plant_data, .(wrf), summarise, mean_flow = mean(influent_flow_mg), sd_flow = sd(influent_flow_mg), mean_tss = mean(influent_tss_mg_l), sd_tss = sd(influent_tss_mg_l))
my_comparisons <- list( c("NO", "MI"), c("NO", "CC"), c("MI", "CC") )
plant_data %>% ggplot(aes(x = wrf, y = influent_flow_L)) +
geom_boxplot() +
ylab("Influent Flow Volume (MGD)") +
stat_compare_means(comparisons = my_comparisons)
plant_data %>% ggplot(aes(x = wrf, y = influent_tss_mg_l)) +
geom_boxplot() +
ylab("Influent TSS (mg/L)") +
stat_compare_means(comparisons = my_comparisons)
plant_data %>% ggplot(aes(x = date, y = influent_flow_L)) + geom_point() + facet_wrap(~wrf)
plant_data %>% ggplot(aes(x = date, y = influent_tss_mg_l)) + geom_point() + facet_wrap(~wrf)
plant_data %>% ggplot(aes(x = influent_flow_L, y = influent_tss_mg_l, color = wrf)) +
geom_point() +
stat_cor(method ="spearman")
recovery_calc = left_join(recovery_calc, sample_data)
recovery_calc = left_join(recovery_calc, plant_data)
View(recovery_calc)
recovery_calc %>% ggplot(aes(x = influent_flow_L, y = percent_recovery)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = influent_flow_L, y = percent_recovery, color = wrf)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = influent_flow_L, y = percent_recovery)) +
geom_point() +
stat_cor(method = "spearman") +
xlab("Influent Flow (L)") +
ylab("Recovery of BCoV (%)") +
ggtitle("Recovery of BCoV vs. Influent Flow")
recovery_calc %>% ggplot(aes(x = influent_flow_L, y = percent_recovery, color = wrf)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = influent_flow_L, y = percent_recovery)) +
geom_point(aes(color = wrf)) +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = influent_tss_mg_l, y = percent_recovery)) +
geom_point() +
stat_cor(method = "spearman") +
xlab("Total Suspended Solids (mg/L)") +
ylab("Recovery of BCoV (%)") +
ggtitle("Recovery of BCoV vs. TSS")
recovery_calc %>% ggplot(aes(x = influent_tss_mg_l, y = percent_recovery, color = wrf)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = influent_tss_mg_l, y = percent_recovery)) +
geom_point(aes(color = wrf)) +
stat_cor(method = "spearman")
wbe2 = read_csv("./data/processed_data/wbe2.csv")
View(wbe2)
wbe2$date = wbe2$sample_date
wbe2$date = as.character(wbe2$date)
wbe2$date = as.Date(wbe2$date, "%m/%d/%Y")
wbe2$wrf = wbe2$facility
ddply(wbe2, .(sample_date, wrf, target), summarise, mean_copies_uL = mean(copies_per_uL))
wbe2 = ddply(wbe2, .(sample_date, wrf, target), summarise, mean_copies_uL = mean(copies_per_uL))
recovery_calc$wrf = as.factor(recovery_calc$wrf)
recovery_calc$wrf  = recode(recovery_calc$wrf,"NO" = "A", "MI" = "B", "CC" = "C")
View(recovery_calc)
wbe2 %>% spread(key = target, value = mean_copies_uL)
wbe2 = wbe2 %>% spread(key = target, value = mean_copies_uL)
wbe2 = read_csv("./data/processed_data/wbe2.csv")
wbe2$wrf = wbe2$facility
wbe2$date = wbe2$sample_date
wbe2$date = as.character(wbe2$date)
wbe2$date = as.Date(wbe2$date, "%m/%d/%Y")
wbe2 = ddply(wbe2, .(date, wrf, target), summarise, mean_copies_uL = mean(copies_per_uL))
wbe2 = wbe2 %>% spread(key = target, value = mean_copies_uL)
recovery_calc$wrf = as.factor(recovery_calc$wrf)
recovery_calc$wrf  = recode(recovery_calc$wrf,"NO" = "A", "MI" = "B", "CC" = "C")
recovery_calc = left_join(recovery_calc, wbe2)
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N1)) + geom_point()
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N1)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N1)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N2)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N2)) +
geom_point(aes(color = wrf)) +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N1)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N2)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot() +
geom_point(aes(x = date, y = percent_recovery)) +
geom_point(aes(x = date, y = N2)) +
facet_wrap(~wrf)
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N2, color = wrf)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N1)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N1, color = wrf)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N2)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% ggplot(aes(x = percent_recovery, y = N2, color = wrf)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% filter(wrf == "B") %>% ggplot(aes(x = percent_recovery, y = N2)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% filter(wrf == "B") %>%
filter(percent_recovery <200) %>%
ggplot(aes(x = percent_recovery, y = N2)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>%
filter(percent_recovery <200) %>%
ggplot(aes(x = percent_recovery, y = N2)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% filter(N1> 1.612807) %>% ggplot(aes(x = percent_recovery, y = N1)) +
geom_point() +
stat_cor(method = "spearman")
recovery_calc %>% filter(N2 > 11.51081) %>% ggplot(aes(x = percent_recovery, y = N1)) +
geom_point() +
stat_cor(method = "spearman")
?sum
?lm()
3.66e6
3.66e6/1000/1000
3.66*280/60
17*(3/25)
*2/20
2*2/20
0.2*20/2*25/3*60/280
2.47e7
2.47e7/1000/1000
24.7*280/60
115*3/25
13/8*2/20
13.8*2/20
#Load Libraries
library(tidyverse)
library(purrr)
library(reshape2)
library(viridis)
library(ggpubr)
#Load Data
##PE150 Data##
#read in file names for HiSeq (PE150)
PE150_files = fs::dir_ls("./data/raw_data/HiSeq/HiSeq_MC_Amp_03.15.2022", glob="*.depth")
#create a data frame with all files, named by their "source" file
depth_data_PE150 = PE150_files %>%
purrr::map_dfr(read_table, .id = "source", col_names = FALSE) %>%
dplyr::mutate(source = stringr::str_replace(source, "./data/raw_data/HiSeq/HiSeq_MC_Amp_03.15.2022/", "")) %>%
dplyr::mutate(source = stringr::str_replace(source, ".depth", "")) %>%
dplyr::mutate(source = stringr::str_replace(source, "-RBD-", "_Amp_"))
#add in column names
names(depth_data_PE150) = c("sample_id", "ref_strain", "variant", "nucleotide", "depth")
##PE250 Data##
#read in file names
PE250_files = fs::dir_ls("./data/raw_data/MiSeq/MiSeq_MC_Amp_02.14.2022", glob="*.depth")
#create a data frame with all files, named by their "source" file
depth_data_PE250 = PE250_files %>%
purrr::map_dfr(read_table, .id = "source", col_names = FALSE) %>%
dplyr::mutate(source = stringr::str_replace(source, "./data/raw_data/MiSeq/MiSeq_MC_Amp_02.14.2022/", "")) %>%
dplyr::mutate(source = stringr::str_replace(source, ".depth", "")) %>%
dplyr::mutate(source = stringr::str_replace(source, "-RBD-", "_Amp_"))
#add column names
names(depth_data_PE250) = c("sample_id", "ref_strain", "variant", "nucleotide", "depth")
##SAMPLE DETAILS##
#add in sample data
sample_details = read_csv("./data/raw_data/sample_details.csv")
depth_data_PE150 = depth_data_PE150 %>%
left_join(sample_details, by = "sample_id") %>%
mutate(amp_length = "PE150")
depth_data_PE250 = depth_data_PE250 %>%
left_join(sample_details, by = "sample_id") %>%
mutate(amp_length = "PE250")
setwd("~/wbe_manuscript_cleaned")
#Load Libraries
library(tidyverse)
library(dplyr)
library(reshape2)
library(ggpubr)
library(DescTools)
library(ggstatsplot)
library(ggpmisc)
library(correlation)
library(viridis)
library(stringr)
#Load data
load("./data/processed_data/final_dataframe.rds")
##########Simple Cross-Correlations##########
####################################
#All the correlations you can think of
#correlations = as.data.frame(correlation(my.data, method = "spearman", ci = 0.95))
#write_csv(correlations, "./data/processed_data/spearman_correlations.csv")
#After hand-filtering for important correlations of interest, re-load them, here
corr.results = read_csv("./data/processed_data/corr.results.18JUNE22.csv")
#Heat Map of Correlations
fig3 = corr.results %>%
dplyr::mutate(Target = as.factor(Target),
Target = ordered(Target, levels = c("N1", "N2", "N1&N2"))) %>%
dplyr::mutate(Parameter = as.factor(Parameter),
Parameter = ordered(Parameter,
levels = c("Recovery-Adjusted Viral Load",
"Viral Load",
"Concentration",
"Sample Positivity"
))) %>%
ggplot(aes(x = Target , y = Parameter, fill= rho)) +
geom_tile(color = "black") +
scale_fill_continuous_diverging(palette = "Blue Red 3", mid = 0.45, name = "Spearman's \n Rho") +
theme_ggstatsplot() +
facet_wrap(~Scale) +
geom_text(aes(x = Target, y = Parameter, label = rho)) +
geom_text(aes(x = Target, y = Parameter, label = Sig), nudge_y = 0.15) +
ylab("")
#tiff('./figures/fig3.tiff', units="in", width = 7, height = 5, res=600, compression = 'lzw', pointsize = 12)
plot(fig3)
#dev.off()
library(colorspace)
#Heat Map of Correlations
fig3 = corr.results %>%
dplyr::mutate(Target = as.factor(Target),
Target = ordered(Target, levels = c("N1", "N2", "N1&N2"))) %>%
dplyr::mutate(Parameter = as.factor(Parameter),
Parameter = ordered(Parameter,
levels = c("Recovery-Adjusted Viral Load",
"Viral Load",
"Concentration",
"Sample Positivity"
))) %>%
ggplot(aes(x = Target , y = Parameter, fill= rho)) +
geom_tile(color = "black") +
scale_fill_continuous_diverging(palette = "Blue Red 3", mid = 0.45, name = "Spearman's \n Rho") +
theme_ggstatsplot() +
facet_wrap(~Scale) +
geom_text(aes(x = Target, y = Parameter, label = rho)) +
geom_text(aes(x = Target, y = Parameter, label = Sig), nudge_y = 0.15) +
ylab("")
#tiff('./figures/fig3.tiff', units="in", width = 7, height = 5, res=600, compression = 'lzw', pointsize = 12)
plot(fig3)
#dev.off()
#Heat Map of Correlations
fig3 = corr.results %>%
dplyr::mutate(Target = as.factor(Target),
Target = ordered(Target, levels = c("N1", "N2", "N1&N2"))) %>%
dplyr::mutate(Parameter = as.factor(Parameter),
Parameter = ordered(Parameter,
levels = c("Recovery-Adjusted Viral Load",
"Viral Load",
"Concentration",
"Sample Positivity"
))) %>%
ggplot(aes(x = Target , y = Parameter, fill= rho)) +
geom_tile(color = "black") +
scale_fill_continuous_diverging(palette = "Blue Red 2", mid = 0.4, name = "Spearman's \n Rho") +
theme_ggstatsplot() +
facet_wrap(~Scale) +
geom_text(aes(x = Target, y = Parameter, label = rho)) +
geom_text(aes(x = Target, y = Parameter, label = Sig), nudge_y = 0.15) +
ylab("")
#tiff('./figures/fig3.tiff', units="in", width = 7, height = 5, res=600, compression = 'lzw', pointsize = 12)
plot(fig3)
#dev.off()
#Heat Map of Correlations
fig3 = corr.results %>%
dplyr::mutate(Target = as.factor(Target),
Target = ordered(Target, levels = c("N1", "N2", "N1&N2"))) %>%
dplyr::mutate(Parameter = as.factor(Parameter),
Parameter = ordered(Parameter,
levels = c("Recovery-Adjusted Viral Load",
"Viral Load",
"Concentration",
"Sample Positivity"
))) %>%
ggplot(aes(x = Target , y = Parameter, fill= rho)) +
geom_tile(color = "black") +
scale_fill_continuous_diverging(palette = "Blue Red 2", mid = 0.4, name = "Spearman's \n Rho") +
theme_ggstatsplot() +
facet_wrap(~Scale) +
geom_text(aes(x = Target, y = Parameter, label = rho)) +
geom_text(aes(x = Target, y = Parameter, label = Sig), nudge_y = 0.15) +
ylab("")
tiff('./figures/fig3.tiff', units="in", width = 7, height = 5, res=600, compression = 'lzw', pointsize = 12)
plot(fig3)
dev.off()
